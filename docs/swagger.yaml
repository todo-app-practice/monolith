definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      expires_at:
        type: integer
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/auth.UserInfo'
    type: object
  auth.UserInfo:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    type: object
  errors.ResponseError:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  todos.PaginatedResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/todos.ToDoItem'
        type: array
      metadata:
        $ref: '#/definitions/todos.PaginationMetadata'
    type: object
  todos.PaginationMetadata:
    properties:
      resultCount:
        type: integer
      totalCount:
        type: integer
    type: object
  todos.ToDoItem:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      done:
        type: boolean
      id:
        type: integer
      text:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
    required:
    - text
    type: object
  todos.ToDoItemUpdateInput:
    properties:
      done:
        type: boolean
      text:
        type: string
    type: object
  users.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      emailVerificationExpiry:
        type: string
      emailVerificationToken:
        type: string
      firstName:
        type: string
      id:
        type: integer
      isEmailVerified:
        type: boolean
      lastName:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    type: object
info:
  contact: {}
paths:
  /hello:
    get:
      description: This endpoint returns a simple "hello world" message
      operationId: hello
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Hello endpoint
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      operationId: login
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ResponseError'
      summary: User login
      tags:
      - auth
  /logout:
    post:
      description: Logout user and revoke refresh tokens
      operationId: logout
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ResponseError'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /refresh:
    post:
      consumes:
      - application/json
      description: Refresh JWT token using refresh token
      operationId: refresh
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ResponseError'
      summary: Refresh JWT token
      tags:
      - auth
  /todos:
    get:
      description: This endpoint returns all todo items, with pagination
      operationId: getAll
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Order of items in relation to Done
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todos.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ResponseError'
      security:
      - BearerAuth: []
      summary: Get all todo items
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: This endpoint creates a new todo item
      operationId: create
      parameters:
      - description: ToDo item to create
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/todos.ToDoItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todos.ToDoItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ResponseError'
      security:
      - BearerAuth: []
      summary: Create a new todo item
      tags:
      - todos
  /todos/{id}:
    delete:
      description: This endpoint deletes a todo item by its ID
      operationId: deleteById
      parameters:
      - description: ToDo Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ResponseError'
      security:
      - BearerAuth: []
      summary: Delete a todo item by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: This endpoint updates a todo item by its ID
      operationId: updateById
      parameters:
      - description: ToDo Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: ToDo item update data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/todos.ToDoItemUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todos.ToDoItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ResponseError'
      security:
      - BearerAuth: []
      summary: Update a todo item by ID
      tags:
      - todos
  /update/{id}:
    put:
      consumes:
      - application/json
      description: This endpoint updates an existing user based on the provided ID
        and returns the updated user details
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Invalid user data or ID
          schema:
            $ref: '#/definitions/errors.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ResponseError'
      security:
      - BearerAuth: []
      summary: Update an existing user
      tags:
      - users
  /user:
    post:
      consumes:
      - application/json
      description: This endpoint creates a new user and sends an email verification
        link
      operationId: create-user
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Invalid user data
          schema:
            $ref: '#/definitions/errors.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ResponseError'
      summary: Create a new user
      tags:
      - users
  /verify-email:
    get:
      description: This endpoint verifies a user's email address using the verification
        token
      operationId: verify-email
      parameters:
      - description: Email verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: Email verified successfully
          schema:
            type: string
        "400":
          description: Invalid or expired token
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Verify email address
      tags:
      - users
swagger: "2.0"
